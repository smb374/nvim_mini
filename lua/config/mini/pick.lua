require("mini.pick").setup()

vim.ui.select = MiniPick.ui_select

local map = vim.keymap.set

map("n", "<leader>sR", function()
  require("mini.pick").builtin.resume()
end, { desc = "Resume Last Picker" })
map("n", "<leader>sG", function()
  require("mini.pick").builtin.grep_live({ tool = "rg" })
end, { desc = "Grep Pattern (Live Feedback)" })
map("n", "<leader>sh", function()
  require("mini.pick").builtin.help({ tool = "rg" })
end, { desc = "Pick Help" })
map("n", "<leader>sc", function()
  require("mini.extra").pickers.commands()
end, { desc = "Pick Commands" })
map("n", "<leader>sd", function()
  require("mini.extra").pickers.diagnostic({ scope = "all" })
end, { desc = "Pick Diagnostics (All)" })
map("n", "<leader>sD", function()
  require("mini.extra").pickers.diagnostic({ scope = "current" })
end, { desc = "Pick Diagnostics (Buffer)" })
map("n", "<leader>sH", function()
  require("mini.extra").pickers.history()
end, { desc = "Pick History" })
map("n", "<leader>sm", function()
  require("mini.extra").pickers.marks()
end, { desc = "Pick Marks" })
map("n", "<leader>sr", function()
  require("mini.extra").pickers.registers()
end, { desc = "Pick Registers" })
map("n", "<leader>ss", function()
  require("mini.extra").pickers.spellsuggest()
end, { desc = "Pick Spell Suggestion" })

-- File
map("n", "<leader>sf", function()
  require("mini.pick").builtin.files({ tool = "rg" })
end, { desc = "Pick File" })
map("n", "<leader>ff", function()
  require("mini.pick").builtin.files({ tool = "rg" })
end, { desc = "Pick File" })

-- Buffer
map("n", "<leader>sb", function()
  require("mini.pick").builtin.buffers()
end, { desc = "Pick Buffer" })
map("n", "<leader>bf", function()
  require("mini.pick").builtin.buffers()
end, { desc = "Pick Buffer" })

-- Git
map("n", "<leader>sgb", function()
  require("mini.extra").pickers.git_branches()
end, { desc = "Pick Git Branches" })
map("n", "<leader>sgc", function()
  require("mini.extra").pickers.git_commits()
end, { desc = "Pick Git Commits" })
map("n", "<leader>sgf", function()
  require("mini.extra").pickers.git_files()
end, { desc = "Pick Git Files" })
map("n", "<leader>sgh", function()
  require("mini.extra").pickers.git_hunks()
end, { desc = "Pick Git Hunks" })

-- List
map("n", "<leader>sLq", function()
  require("mini.extra").pickers.list({ scope = "quickfix" })
end, { desc = "Pick Quickfix List" })
map("n", "<leader>sLl", function()
  require("mini.extra").pickers.list({ scope = "location" })
end, { desc = "Pick Location List" })
map("n", "<leader>sLj", function()
  require("mini.extra").pickers.list({ scope = "jump" })
end, { desc = "Pick Jump List" })
map("n", "<leader>sLc", function()
  require("mini.extra").pickers.list({ scope = "change" })
end, { desc = "Pick Change List" })

-- LSP
map("n", "<leader>sld", function()
  require("mini.extra").pickers.lsp({ scope = "declaration" })
end, { desc = "Pick LSP Declaration" })
map("n", "<leader>slD", function()
  require("mini.extra").pickers.lsp({ scope = "definition" })
end, { desc = "Pick LSP Definition" })
map("n", "<leader>sls", function()
  require("mini.extra").pickers.lsp({ scope = "document_symbol" })
end, { desc = "Pick LSP Symbols (Document)" })
map("n", "<leader>sli", function()
  require("mini.extra").pickers.lsp({ scope = "implementation" })
end, { desc = "Pick LSP Implementation" })
map("n", "<leader>slr", function()
  require("mini.extra").pickers.lsp({ scope = "references" })
end, { desc = "Pick LSP References" })
map("n", "<leader>slt", function()
  require("mini.extrt").pickers.lsp({ scope = "type_definition" })
end, { desc = "Pick LSP Type Definition" })
map("n", "<leader>slS", function()
  require("mini.extra").pickers.lsp({ scope = "workspace_symbol" })
end, { desc = "Pick LSP Symbols (Workspace)" })
